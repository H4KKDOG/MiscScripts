--// Services
_Hawk = "RunUI"
local Hawk = loadstring(game:HttpGet("https://raw.githubusercontent.com/H4KKDOG/Library/refs/heads/main/Hawk", true))()
local Window = Hawk:Window({
	ScriptName = "Fisch TP",
	DestroyIfExists = true,
	Theme = "Dark"
})

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local VIM = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GuiService = game:GetService("GuiService")
local TeleportService = game:GetService("TeleportService")
local Workspace = game:GetService("Workspace")

--// Player Variables
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local head = character:WaitForChild("Head")
local playerGui = player:WaitForChild("PlayerGui")
local Camera = Workspace.CurrentCamera

--// Debug Mode
local debugEnabled = true
local Notifications = Hawk:AddNotifications()

--// Initial Notifications
Notifications:Notification("Fisch", "Press LeftControl to Toggle GUI.", "Notify", 5)
Notifications:Notification("Fisch", "Simple Script.", "Notify", 5)

--// HTTP Request Function
local function http_request(url, content)
    local response = http_request({
        Url = url,
        Method = "POST",
        Headers = { ["Content-Type"] = "application/json" },
        Body = HttpService:JSONEncode({ content })
    })
    repeat task.wait() until response
    return response
end

--// Select GUI
local function selectUI(GUI)
    if GUI and GUI.Selectable then
        GuiService.SelectedObject = GUI
    end
end

--// KeyPress
local function KeyPress(keyCode)
    VIM:SendKeyEvent(true, keyCode, false, game)
    VIM:SendKeyEvent(false, keyCode, false, game)
end

--// Auto Reel Function
local reelConnection
local function auto_reel(toggle)
    if reelConnection then
        reelConnection:Disconnect()
        reelConnection = nil
    end

    if toggle then
        reelConnection = RunService.RenderStepped:Connect(function()
            local reel = playerGui:FindFirstChild("reel")
            if reel then
                local bar = reel:FindFirstChild("bar")
                if bar then
                    local playerbar = bar:FindFirstChild("playerbar")
                    if playerbar then
                        GuiService.SelectedObject = nil
                        task.wait(5.0)
                        ReplicatedStorage.events:FindFirstChild("reelfinished"):FireServer(100, true)
                    end
                end
            end
        end)
    end
    if debugEnabled then Notifications:Notification("Auto-Reel", "Set to: " .. tostring(toggle), "Notify", 5) end
end

--// Auto Cast Function
local castConnection
local function auto_cast(toggle)
    if castConnection then
        castConnection:Disconnect()
        castConnection = nil
    end

    if toggle then
        castConnection = playerGui.ChildRemoved:Connect(function(child)
            if child.Name == "reel" then
                task.wait(3.0)
                VIM:SendMouseButtonEvent(1, 1, Enum.UserInputType.MouseButton1.Value, true, game, 1)
                task.wait(0.75)
                VIM:SendMouseButtonEvent(1, 1, Enum.UserInputType.MouseButton1.Value, false, game, 1)
                task.wait(0.1)
                player.Character:FindFirstChildOfClass("Tool").events.reset:FireServer()
                player.Character:FindFirstChildOfClass("Tool").events.cast:FireServer(100)
                Notifications:Notification("Auto Cast", "Spoofed (Perfect)", "Done", 3)
            end
        end)
    end
    if debugEnabled then Notifications:Notification("Auto-Cast", "Set to: " .. tostring(toggle), "Notify", 5) end
end

--// Auto Shake Function
local shakeConnection
local function auto_shake(toggle)
    if shakeConnection then
        shakeConnection:Disconnect()
        shakeConnection = nil
        GuiService.SelectedObject = nil
    end

    if toggle then
        shakeConnection = playerGui.ChildAdded:Connect(function(child)
            if child.Name == "shakeui" then
                child:WaitForChild("safezone").ChildAdded:Connect(function(c)
                    if c.Name == "button" then
                        selectUI(c)
                        KeyPress(Enum.KeyCode.Return)
                    else
                        GuiService.SelectedObject = nil
                    end
                end)
            end
        end)
    end
    if debugEnabled then Notifications:Notification("Auto-Shake", "Set to: " .. tostring(toggle), "Notify", 5) end
end

--// GUI Setup
Window:Close({
	visibility = false,
	Callback = function()
		Window:Destroy()
	end,
})

Window:Minimize({
	visibility = true,
	OpenButton = true,
	Callback = function()

	end,
})

local tab1 = Window:Tab("Island")
local tab2 = Window:Tab("Fishing")
local tab3 = Window:Tab("Abundance")
local tab4 = Window:Tab("Debug")

local Island = tab1:Section("Select Island")
local Fishing = tab2:Section("Select Spot")
local Abundance = tab3:Section("Select Abundance")
local Debug = tab4:Section("Dev/Misc")

Island:Line()
Island:Line()
Fishing:Line()
Fishing:Line()
Abundance:Line()
Abundance:Line()
Debug:Line()
Debug:Line()

--// Debug Functions
Debug:Button("Current Position","Set to Clipboard",function()
    local position = humanoidRootPart.Position
    local clipboardContent = "{ \"AAAAAAA\", Vector3.new(" .. position.X .. ", " .. position.Y .. ", " .. position.Z .. ") },"
    setclipboard(clipboardContent)
end)

Debug:Button("Rejoin Server","Server",function()
	TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
end)

Debug:Button("Change Server","Server",function()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/H4KKDOG/MiscScripts/refs/heads/main/ServerHop"))()
end)

Debug:Line()
Debug:Line()

Debug:Toggle("Auto Reel", true ,function(value)
	if value == true then
		auto_reel(true)
	elseif value == false then
		auto_reel(false)
	end
end)

Debug:Toggle("Auto Cast", true ,function(value)
	if value == true then
		auto_cast(true)
	elseif value == false then
		auto_cast(false)
	end
end)

Debug:Toggle("Auto Shake", true ,function(value)
	if value == true then
		auto_shake(true)
	elseif value == false then
		auto_shake(false)
	end
end)

--// Area/Island Teleport
local locations = {
    { "Moosewood", Vector3.new(383.060546875, 134.50001525878906, 267.64471435546875) },
    { "Roslit Hamlet", Vector3.new(-1442.3291015625, 133, 726.9091796875) },
    { "Terrapin Island", Vector3.new(-192.4793243408203, 135.2742919921875, 1953.1597900390625) },
    { "Statue Of Sovereignty", Vector3.new(31.58206558227539, 144.49334716796875, -1021.61083984375) },
    { "Snowcap Island", Vector3.new(2620.824951171875, 139.7838592529297, 2423.62890625) },
    { "The Arc", Vector3.new(998.9711303710938, 131.3202362060547, -1237.1431884765625) },
    { "Keepers Altar", Vector3.new(1296.32080078125, -805.292236328125, -298.93817138671875) },
    { "Harvester Spike", Vector3.new(-1254.696044921875, 137.56063842773438, 1554.47119140625) },
    { "Mushgrove Swamp", Vector3.new(2441.1611328125, 130.904052734375, -683.6802368164062) },
    { "The Vertigo", Vector3.new(-95.83425903320312, -513.2993774414062, 1116.5545654296875) }
}

for _, location in ipairs(locations) do
    Island:Button(location[1],"TP to Location",function()
        humanoidRootPart.CFrame = CFrame.new(location[2])
    end)
end

--// Fishing Spot Teleport
local fishingSpots = {
	{ "Sunstone (Common Crate)", Vector3.new(-1149.08508, 134.49998, -1055.80151) },
    { "Moosewood (Small Island)", Vector3.new(229.60299682617188, 139.34976196289062, 43.50540542602539) },
    { "Snowcap (Cave)", Vector3.new(2805.062744140625, 131.85032653808594, 2712.624267578125) }
}

for _, location in ipairs(fishingSpots) do
    Fishing:Button(location[1],"TP to Location",function()
        humanoidRootPart.CFrame = CFrame.new(location[2])
    end)
end

--// Abundance Teleport
local abundanceLocations = {
    { "Amberjack (Ocean)", Vector3.new(537.463134765625, 137.1532440185547, -172.55160522460938) },
    { "Arapaima (Land)", Vector3.new(-1742.292724609375, 148.31674194335938, 577.1846923828125) }
}

for _, location in ipairs(abundanceLocations) do
    Abundance:Button(location[1],"TP to Location",function()
        humanoidRootPart.CFrame = CFrame.new(location[2])
    end)
end

--// Key Bind for GUI Toggle
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.LeftControl then
        Hawk:ToggleUI()
    end
end)

Hawk:ToggleUI()
