--// Services
_Hawk = "RunUI"
local Hawk = loadstring(game:HttpGet("https://raw.githubusercontent.com/H4KKDOG/Library/refs/heads/main/Hawk"))()
local Window = Hawk:Window({ScriptName = "Fisch TP", DestroyIfExists = true, Theme = "Dark"})
local Close = Window:Close({visibility = false, Callback = function() Window:Destroy() end,})
local Minimize = Window:Minimize({visibility = true, OpenButton = true, Callback = function() end,})

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local VIM = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GuiService = game:GetService("GuiService")
local TeleportService = game:GetService("TeleportService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local head = character:WaitForChild("Head")
local playerGui = player:WaitForChild("PlayerGui")
local Camera = Workspace.CurrentCamera

local debugEnabled = true
local Finished = false
local Notifications = Hawk:AddNotifications()

local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local last

local File = pcall(function()
   AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)

if not File then
   table.insert(AllIDs, actualHour)
   writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end

--// ServerHop Function
local function TPReturner()
   local Site;
   if foundAnything == "" then
       Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
   else
       Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
   end
   local ID = ""
   if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
       foundAnything = Site.nextPageCursor
   end
   local num = 0;
   local extranum = 0
   for i,v in pairs(Site.data) do
       extranum += 1
       local Possible = true
       ID = tostring(v.id)
       if tonumber(v.maxPlayers) > tonumber(v.playing) then
           if extranum ~= 1 and tonumber(v.playing) < last or extranum == 1 then
               last = tonumber(v.playing)
           elseif extranum ~= 1 then
               continue
           end
           for _,Existing in pairs(AllIDs) do
               if num ~= 0 then
                   if ID == tostring(Existing) then
                       Possible = false
                   end
               else
                   if tonumber(actualHour) ~= tonumber(Existing) then
                       local delFile = pcall(function()
                           delfile("NotSameServers.json")
                           AllIDs = {}
                           table.insert(AllIDs, actualHour)
                       end)
                   end
               end
               num = num + 1
           end
           if Possible == true then
               table.insert(AllIDs, ID)
               wait()
               pcall(function()
                   writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                   wait()
                   game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
               end)
               wait(5)
           end
       end
   end
end

local function Teleport()
   while wait() do
       pcall(function()
           TPReturner()
           if foundAnything ~= "" then
               TPReturner()
           end
       end)
   end
end

--// KeyPress
local function KeyPress(keyCode)
    VIM:SendKeyEvent(true, keyCode, false, game)
    VIM:SendKeyEvent(false, keyCode, false, game)
end

--// Destroy AFK
local function replaceAFKEvent()
    local AFK = ReplicatedStorage:FindFirstChild("events"):FindFirstChild("afk")
    if AFK then
        task.wait(0.5)
        local FakeAFK = Instance.new("RemoteEvent")
        FakeAFK.Name = "afk"
        FakeAFK.Parent = ReplicatedStorage:FindFirstChild("events")
        
        print("AntiAFK")
        AFK:Destroy()
    end
end

--// Auto Shake and Reel Function
playerGui.DescendantAdded:Connect(function(Descendant)
    if Descendant.Name == 'button' and Descendant.Parent.Name == 'safezone' then
        GuiService.SelectedObject = Descendant
        task.wait(0.69)
        KeyPress(Enum.KeyCode.Return)
    else
        GuiService.SelectedObject = nil
    end
    if Descendant.Name == 'playerbar' and Descendant.Parent.Name == 'bar' then
        Finished = true
        GuiService.SelectedObject = nil

        while Finished do
            ReplicatedStorage.events.reelfinished:FireServer(100, true)
            task.wait(0.1)
        end
    end
end)

--// Auto Cast Function
playerGui.DescendantRemoving:Connect(function(Descendant)
    if Descendant.Name == 'reel' then
        Finished = false

        player.Character:FindFirstChildOfClass("Tool").events.reset:FireServer()
        task.wait(3.0)
        VIM:SendMouseButtonEvent(0, 0, 0, true, game, 1)
        task.wait(0.15)
        VIM:SendMouseButtonEvent(0, 0, 0, false, game, 1)
        wait()
        player.Character:FindFirstChildOfClass("Tool").events.reset:FireServer()
        player.Character:FindFirstChildOfClass("Tool").events.cast:FireServer(100)
    end
end)

--// GUI Setup
local tab1 = Window:Tab("Island")
local tab2 = Window:Tab("Fishing")
local tab3 = Window:Tab("Debug")

local Island = tab1:Section("Select Island")
local Fishing = tab2:Section("Select Spot")
local Debug = tab3:Section("Dev/Misc")

Island:Line()
Island:Line()
Fishing:Line()
Fishing:Line()
Debug:Line()
Debug:Line()

--// Debug Functions
Debug:Button("Current Position","Set to Clipboard",function()
    local position = humanoidRootPart.Position
    local clipboardContent = "{ \"AAAAAAA\", Vector3.new(" .. position.X .. ", " .. position.Y .. ", " .. position.Z .. ") },"
    setclipboard(clipboardContent)
end)

Debug:Button("Rejoin Server","Server",function()
    TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
end)

Debug:Button("Change Server","Server",function()
    Teleport()
end)

--// Area/Island Teleport
local locations = {
    { "Moosewood", Vector3.new(383.060546875, 134.50001525878906, 267.64471435546875) },
    { "Roslit Hamlet", Vector3.new(-1442.3291015625, 133, 726.9091796875) },
    { "Terrapin Island", Vector3.new(-192.4793243408203, 135.2742919921875, 1953.1597900390625) },
    { "Sunstone Island", Vector3.new(-919.7451782226562, 134.69882202148438, -1121.707763671875) },
    { "Statue Of Sovereignty", Vector3.new(31.58206558227539, 144.49334716796875, -1021.61083984375) },
    { "Snowcap Island", Vector3.new(2620.824951171875, 139.7838592529297, 2423.62890625) },
    { "The Arc", Vector3.new(998.9711303710938, 131.3202362060547, -1237.1431884765625) },
    { "Keepers Altar", Vector3.new(1296.32080078125, -805.292236328125, -298.93817138671875) },
    { "Harvester Spike", Vector3.new(-1254.696044921875, 137.56063842773438, 1554.47119140625) },
    { "Mushgrove Swamp", Vector3.new(2441.1611328125, 130.904052734375, -683.6802368164062) },
    { "Vertigo", Vector3.new(-95.83425903320312, -513.2993774414062, 1116.5545654296875) }
}

for _, location in ipairs(locations) do
    Island:Button(location[1],"TP to Location",function()
        humanoidRootPart.CFrame = CFrame.new(location[2])
    end)
end

--// Fishing Spot Teleport
local fishingSpots = {
    { "Sunstone (Common Crate)", Vector3.new(-1149.08508, 134.49998, -1055.80151) },
    { "Vertigo (Small Stone)", Vector3.new(-107.99476623535156, -731.946533203125, 1207.8134765625) },
    { "Moosewood (Small Island)", Vector3.new(229.60299682617188, 139.34976196289062, 43.50540542602539) },
    { "Snowcap (Cave)", Vector3.new(2805.062744140625, 131.85032653808594, 2712.624267578125) }
}

for _, location in ipairs(fishingSpots) do
    Fishing:Button(location[1],"TP to Location",function()
        humanoidRootPart.CFrame = CFrame.new(location[2])
    end)
end

if UserInputService.KeyboardEnabled and not UserInputService.TouchEnabled then
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Enum.KeyCode.LeftControl then
            Hawk:ToggleUI()
        end
    end)

    local WindowAFK
    WindowAFK = UserInputService.WindowFocused:Connect(function()
        replaceAFKEvent()
        WindowAFK:Disconnect()
    end)

    Notifications:Notification("Fisch", "Press LeftControl to Toggle GUI.", "Notify", 5)
    Notifications:Notification("Fisch", "Simple Script.", "Notify", 5)
    Hawk:ToggleUI()
elseif UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled then
    replaceAFKEvent()
    Notifications:Notification("Fisch", "Simple Script.", "Notify", 5)
end

Island:Line()
Island:Line()
Fishing:Line()
Fishing:Line()
Debug:Line()
Debug:Line()
